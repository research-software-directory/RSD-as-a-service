# SPDX-FileCopyrightText: 2021 - 2023 Dusan Mijatovic (dv4all)
# SPDX-FileCopyrightText: 2021 - 2023 dv4all
# SPDX-FileCopyrightText: 2021 - 2025 Ewan Cahen (Netherlands eScience Center) <e.cahen@esciencecenter.nl>
# SPDX-FileCopyrightText: 2021 - 2025 Netherlands eScience Center
# SPDX-FileCopyrightText: 2022 - 2025 Christian Meeßen (GFZ) <christian.meessen@gfz-potsdam.de>
# SPDX-FileCopyrightText: 2022 - 2025 Helmholtz Centre Potsdam - GFZ German Research Centre for Geosciences
# SPDX-FileCopyrightText: 2022 Helmholtz Centre for Environmental Research (UFZ)
# SPDX-FileCopyrightText: 2022 Matthias Rüster (GFZ) <matthias.ruester@gfz-potsdam.de>
# SPDX-FileCopyrightText: 2023 - 2025 Dusan Mijatovic (Netherlands eScience Center)
# SPDX-FileCopyrightText: 2023 Dusan Mijatovic (dv4all) (dv4all)
# SPDX-FileCopyrightText: 2025 Paula Stock (GFZ) <paula.stock@gfz.de>
#
# SPDX-License-Identifier: Apache-2.0

version: "3.0"

services:
  database:
    build: ./database
    image: rsd/database:3.0.0
    ports:
      # enable connection from outside (development mode)
      - "5432:5432"
    environment:
      # it uses values from .env file
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_AUTHENTICATOR_PASSWORD
    volumes:
      # persist data in named docker volume
      # to remove use: docker compose down --volumes
      # to inspect use: docker volume ls
      - pgdb:/var/lib/postgresql/data/
    networks:
      - net

  backend:
    build: ./backend-postgrest
    image: rsd/backend-postgrest:1.13.0
    expose:
      - 3500
    environment:
      # it needs to be here to use values from .env file
      - PGRST_DB_URI=postgres://rsd_authenticator:${POSTGRES_AUTHENTICATOR_PASSWORD}@${POSTGRES_DB_HOST}:${POSTGRES_DB_HOST_PORT}/${POSTGRES_DB}
      - PGRST_DB_ANON_ROLE
      - PGRST_DB_SCHEMA
      - PGRST_SERVER_PORT
      - PGRST_JWT_SECRET
    depends_on:
      - database
    networks:
      - net

  auth:
    build: ./authentication
    image: rsd/auth:1.6.0
    ports:
      - 5005:5005
    expose:
      - 7000
    environment:
      # it uses values from .env file
      - RSD_ENVIRONMENT
      - POSTGREST_URL
      - RSD_AUTH_COUPLE_PROVIDERS
      - RSD_AUTH_PROVIDERS
      - SURFCONEXT_CLIENT_ID
      - SURFCONEXT_WELL_KNOWN_URL
      - HELMHOLTZID_CLIENT_ID
      - HELMHOLTZID_WELL_KNOWN_URL
      - HELMHOLTZID_SCOPES
      - HELMHOLTZID_ALLOW_EXTERNAL_USERS
      - ORCID_CLIENT_ID
      - ORCID_WELL_KNOWN_URL
      - AZURE_CLIENT_ID
      - AZURE_WELL_KNOWN_URL
      - AZURE_ORGANISATION
      - AZURE_DISPLAY_NAME
      - AZURE_DESCRIPTION_HTML
      - LINKEDIN_CLIENT_ID
      - LINKEDIN_WELL_KNOWN_URL
      - AUTH_SURFCONEXT_CLIENT_SECRET
      - AUTH_HELMHOLTZID_CLIENT_SECRET
      - AUTH_ORCID_CLIENT_SECRET
      - AUTH_AZURE_CLIENT_SECRET
      - AUTH_LINKEDIN_CLIENT_SECRET
      - PGRST_JWT_SECRET
      - RSD_API_ACCESS_TOKEN_ENABLED
      - HOST_URL
    depends_on:
      - database
      - backend
    networks:
      - net
    entrypoint:
      [
        "java",
        "-agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n",
        "-cp", "auth.jar",
        "nl.esciencecenter.rsd.authentication.Main"
      ]

  background-services:
    build: ./background-services
    environment:
    # it uses values from .env file
      - POSTGRES_DB_HOST
      - POSTGRES_DB_HOST_PORT
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    depends_on:
      - database
    networks:
      - net

  frontend:
    build:
      context: ./frontend
      # dockerfile to use for build
      dockerfile: Dockerfile
    # update version number to correspond to frontend/package.json
    image: rsd/frontend:4.0.0
    environment:
      # it uses values from .env file
      - POSTGREST_URL
      - PGRST_JWT_SECRET
      - RSD_REVERSE_PROXY_URL
      - RSD_AUTH_URL
      - CROSSREF_CONTACT_EMAIL
      - MATOMO_URL
      - MATOMO_ID
      # link your orcid account
      - RSD_AUTH_COUPLE_PROVIDERS
      - ORCID_CLIENT_ID
      - ORCID_WELL_KNOWN_URL
      # link your linkedin account
      - LINKEDIN_CLIENT_ID
      - LINKEDIN_WELL_KNOWN_URL
    expose:
      - 3000
    depends_on:
      - database
      - backend
      - auth
    volumes:
      - ./frontend/public:/app/public
    #   - ./deployment/hmz/styles:/app/public/styles
    #   - ./deployment/hmz/data:/app/public/data
    #   - ./deployment/hmz/images:/app/public/images
    networks:
      - net

  scrapers:
    build: ./scrapers
    image: rsd/scrapers:1.9.0
    environment:
      # it uses values from .env file
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGREST_URL
      - MAX_REQUESTS_GITHUB
      - MAX_REQUESTS_GITLAB
      - MAX_REQUESTS_4TU
      - MAX_REQUESTS_DOI
      - MAX_REQUESTS_OPENALEX
      - MAX_REQUESTS_ROR
      - ENABLE_NASSA_SCRAPER
      - PGRST_JWT_SECRET
      - API_CREDENTIALS_GITHUB
      - ZENODO_ACCESS_TOKEN
      - CROSSREF_CONTACT_EMAIL
      - LIBRARIES_IO_ACCESS_TOKEN
    depends_on:
      - database
      - backend
    networks:
      - net

  codemeta:
    build: ./codemeta
    image: rsd/codemeta:2.0.0
    expose:
      - "8000"
    environment:
      - ENABLE_4TU_SCRAPER
      - POSTGREST_URL
      - PGRST_JWT_SECRET
    depends_on:
      - backend
    networks:
      - net

  swagger:
    image: swaggerapi/swagger-ui:v5.26.0
    expose:
      - "8080"
    environment:
      - API_URL=${POSTGREST_URL_EXTERNAL}
      - SUPPORTED_SUBMIT_METHODS=[]
    networks:
      - net

  documentation:
    build:
      context: ./documentation
      # dockerfile to use for build
      dockerfile: Dockerfile
    image: rsd/documentation:3.0.0
    expose:
      - "80"
    networks:
      - net

  nginx:
    build:
      context: ./nginx
    image: rsd/nginx:1.1.4
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - database
      - backend
      - auth
      - frontend
      - codemeta
      - swagger
      - documentation
    networks:
      - net
    volumes:
      - lets-encrypt:/etc/letsencrypt
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf

  #----------------------------------------------
  # DISABLED BY DEFAULT IN DEVELOPMENT
  #----------------------------------------------

  rabbitmq:
    image: rabbitmq:4.0
    hostname: rabbitmq
    expose:
      - "5672"
    networks:
      - net
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 0

  mail:
    build: ./mail
    image: rsd/mail:1.0.0
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - MAIL_SMTP_SERVER
      - MAIL_SMTP_PORT
      - MAIL_SMTP_SECURITY
      - MAIL_SMTP_LOGIN
      - MAIL_SMTP_PASSWORD
      - MAIL_FROM_ADDRESS
      - MAIL_REPLY_TO
      - MAIL_QUEUE
    networks:
      - net
    deploy:
      replicas: 0
    restart: on-failure

  publisher:
    build: ./publisher
    image: rsd/publisher:1.0.0
    expose:
      - "5000"
    depends_on:
      - rabbitmq
    environment:
      - MAIL_QUEUE
      - PUBLISHER_JWT_SECRET_KEY
    networks:
      - net
    deploy:
      replicas: 0
    restart: on-failure

  #----------------------------------------------
  # DEVELOPMENT ONLY SERVICES
  #----------------------------------------------

  data-generation:
    build: ./data-generation
    image: rsd/generation:1.6.0
    environment:
      # it needs to be here to use values from .env file
      - PGRST_JWT_SECRET
      - POSTGREST_URL
    depends_on:
      - backend
    networks:
      - net
    deploy:
      replicas: 0

# define name for docker network
# it should have name: rsd-as-a-service_net
networks:
  net:

# named volumes can be managed easier using docker compose
# volume should have name rsd-as-a-service_pgdb
volumes:
  pgdb:
  lets-encrypt:
  rabbitmq-data:
